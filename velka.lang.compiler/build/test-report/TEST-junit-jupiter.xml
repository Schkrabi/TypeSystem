<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="JUnit Jupiter" tests="85" skipped="0" failures="0" errors="0" time="1.44" hostname="Olja2018" timestamp="2020-12-21T16:33:56">
<properties>
<property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.separator" value="/"/>
<property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
<property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
<property name="java.class.path" value="/home/schkabi/Documents/Java/TypeSystem/lib/antlr-4.7.2-complete.jar:/home/schkabi/Documents/Java/TypeSystem/lib/apiguardian-api-1.1.0.jar:/home/schkabi/Documents/Java/TypeSystem/lib/junit-jupiter-api-5.7.0.jar:/home/schkabi/Documents/Java/TypeSystem/lib/junit-platform-commons-1.7.0.jar:/home/schkabi/Documents/Java/TypeSystem/lib/opentest4j-1.2.0.jar:/home/schkabi/Documents/Java/TypeSystem/velka.lang.compiler/classes:/home/schkabi/Documents/Java/TypeSystem/lib/junit-platform-console-standalone-1.7.0.jar:/home/schkabi/Documents/Java/TypeSystem/lib/velka.lang.util.jar:/home/schkabi/Documents/Java/TypeSystem/lib/velka.lang.types.jar"/>
<property name="java.class.version" value="55.0"/>
<property name="java.home" value="/usr/lib/jvm/java-11-openjdk-amd64"/>
<property name="java.io.tmpdir" value="/tmp"/>
<property name="java.library.path" value="/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
<property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
<property name="java.runtime.version" value="11.0.9.1+1-Ubuntu-0ubuntu1.18.04"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="11"/>
<property name="java.vendor" value="Ubuntu"/>
<property name="java.vendor.url" value="https://ubuntu.com/"/>
<property name="java.vendor.url.bug" value="https://bugs.launchpad.net/ubuntu/+source/openjdk-lts"/>
<property name="java.version" value="11.0.9.1"/>
<property name="java.version.date" value="2020-11-04"/>
<property name="java.vm.compressedOopsMode" value="32-bit"/>
<property name="java.vm.info" value="mixed mode, sharing"/>
<property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="11"/>
<property name="java.vm.vendor" value="Ubuntu"/>
<property name="java.vm.version" value="11.0.9.1+1-Ubuntu-0ubuntu1.18.04"/>
<property name="jdk.debug" value="release"/>
<property name="line.separator" value="
"/>
<property name="os.arch" value="amd64"/>
<property name="os.name" value="Linux"/>
<property name="os.version" value="4.15.0-128-generic"/>
<property name="path.separator" value=":"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.library.path" value="/usr/lib/jvm/java-11-openjdk-amd64/lib"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.cpu.isalist" value=""/>
<property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
<property name="sun.java.command" value="org.junit.platform.console.ConsoleLauncher --scan-classpath --reports-dir build/test-report"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="sun.os.patch.level" value="unknown"/>
<property name="user.country" value="US"/>
<property name="user.dir" value="/home/schkabi/Documents/Java/TypeSystem/velka.lang.compiler"/>
<property name="user.home" value="/home/schkabi"/>
<property name="user.language" value="en"/>
<property name="user.name" value="schkabi"/>
<property name="user.timezone" value="Europe/Prague"/>
</properties>
<testcase name="testExceptions()" classname="velka.lang.test.TestTypes" time="0.066">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testExceptions()]
display-name: Exceptions
]]></system-out>
</testcase>
<testcase name="testTypeRepresentation()" classname="velka.lang.test.TestTypes" time="0.017">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeRepresentation()]
display-name: Test Type Representation
]]></system-out>
</testcase>
<testcase name="testRepresentationOr()" classname="velka.lang.test.TestTypes" time="0.077">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testRepresentationOr()]
display-name: Test Representation Or
]]></system-out>
</testcase>
<testcase name="testType()" classname="velka.lang.test.TestTypes" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testType()]
display-name: Test Type
]]></system-out>
</testcase>
<testcase name="testTypeAtom()" classname="velka.lang.test.TestTypes" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeAtom()]
display-name: Test Type Atom
]]></system-out>
</testcase>
<testcase name="testTypeName()" classname="velka.lang.test.TestTypes" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeName()]
display-name: Test Type Name
]]></system-out>
</testcase>
<testcase name="testTypeVariable()" classname="velka.lang.test.TestTypes" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeVariable()]
display-name: Test Type Variable
]]></system-out>
</testcase>
<testcase name="testTypeArrow()" classname="velka.lang.test.TestTypes" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeArrow()]
display-name: Test Type Arrow
]]></system-out>
</testcase>
<testcase name="testTypeTuple()" classname="velka.lang.test.TestTypes" time="0.008">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testTypeTuple()]
display-name: Test Type Tuple
]]></system-out>
</testcase>
<testcase name="testSubstitution()" classname="velka.lang.test.TestTypes" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestTypes]/[method:testSubstitution()]
display-name: Substitution
]]></system-out>
</testcase>
<testcase name="testVariableTypePair()" classname="velka.lang.test.TestParser" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testVariableTypePair()]
display-name: Test Variable Type Pair
]]></system-out>
</testcase>
<testcase name="testElambda()" classname="velka.lang.test.TestParser" time="0.046">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testElambda()]
display-name: Test Extended Lambda
]]></system-out>
</testcase>
<testcase name="testExceptions()" classname="velka.lang.test.TestParser" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testExceptions()]
display-name: Test Exceptions
]]></system-out>
</testcase>
<testcase name="testValidateLambda()" classname="velka.lang.test.TestParser" time="0.017">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testValidateLambda()]
display-name: Test Validate Lambda
]]></system-out>
</testcase>
<testcase name="testParseVariableTypePair()" classname="velka.lang.test.TestParser" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseVariableTypePair()]
display-name: Test Parse Variable Type Pair
]]></system-out>
</testcase>
<testcase name="testParseDefRep()" classname="velka.lang.test.TestParser" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseDefRep()]
display-name: Test Parse Define Representation
]]></system-out>
</testcase>
<testcase name="testParseDefine()" classname="velka.lang.test.TestParser" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseDefine()]
display-name: Test Parse Define
]]></system-out>
</testcase>
<testcase name="testParseError()" classname="velka.lang.test.TestParser" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseError()]
display-name: Test Parse Error
]]></system-out>
</testcase>
<testcase name="testValidateElambda()" classname="velka.lang.test.TestParser" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testValidateElambda()]
display-name: Test Validate Extended Lambda
]]></system-out>
</testcase>
<testcase name="testParseCons()" classname="velka.lang.test.TestParser" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseCons()]
display-name: Test Parse Cons
]]></system-out>
</testcase>
<testcase name="testParseNode()" classname="velka.lang.test.TestParser" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseNode()]
display-name: Test Parse Node
]]></system-out>
</testcase>
<testcase name="testParseType()" classname="velka.lang.test.TestParser" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseType()]
display-name: Test Parse Type
]]></system-out>
</testcase>
<testcase name="testParseDefConversion()" classname="velka.lang.test.TestParser" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseDefConversion()]
display-name: Test Parse Define Conversion
]]></system-out>
</testcase>
<testcase name="testSemanticSimple()" classname="velka.lang.test.TestParser" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testSemanticSimple()]
display-name: Test Semantic Simple
]]></system-out>
</testcase>
<testcase name="testValidateIf()" classname="velka.lang.test.TestParser" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testValidateIf()]
display-name: Vailade If Expression
]]></system-out>
</testcase>
<testcase name="testParseImplementation()" classname="velka.lang.test.TestParser" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseImplementation()]
display-name: Test Parse Implementation
]]></system-out>
</testcase>
<testcase name="testLetType()" classname="velka.lang.test.TestParser" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testLetType()]
display-name: Test Let Type
]]></system-out>
</testcase>
<testcase name="testSemanticParserStatic()" classname="velka.lang.test.TestParser" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testSemanticParserStatic()]
display-name: Test Semantic Parses Static
]]></system-out>
</testcase>
<testcase name="testSemanticNode()" classname="velka.lang.test.TestParser" time="0.018">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testSemanticNode()]
display-name: Test Semantic Node
]]></system-out>
</testcase>
<testcase name="testParseDefType()" classname="velka.lang.test.TestParser" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseDefType()]
display-name: Test Parse Define Type
]]></system-out>
</testcase>
<testcase name="testTypeEnvironment()" classname="velka.lang.test.TestParser" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testTypeEnvironment()]
display-name: Test Type Environment
]]></system-out>
</testcase>
<testcase name="testLambda()" classname="velka.lang.test.TestParser" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testLambda()]
display-name: Test Lambda
]]></system-out>
</testcase>
<testcase name="testParseSpecialForm()" classname="velka.lang.test.TestParser" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestParser]/[method:testParseSpecialForm()]
display-name: Test Parse Special Form
]]></system-out>
</testcase>
<testcase name="testExceptions()" classname="velka.lang.test.TestUtil" time="0.027">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testExceptions()]
display-name: Exceptions
]]></system-out>
</testcase>
<testcase name="testThrowingConsumer()" classname="velka.lang.test.TestUtil" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testThrowingConsumer()]
display-name: ThrowingConsumer
]]></system-out>
</testcase>
<testcase name="testClojureCodeGeneratorBasic()" classname="velka.lang.test.TestUtil" time="0.05">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testClojureCodeGeneratorBasic()]
display-name: ClojureCodeGenerator
]]></system-out>
</testcase>
<testcase name="testPair()" classname="velka.lang.test.TestUtil" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testPair()]
display-name: Pair
]]></system-out>
</testcase>
<testcase name="testRomanNumbers()" classname="velka.lang.test.TestUtil" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testRomanNumbers()]
display-name: RomanNumbers
]]></system-out>
</testcase>
<testcase name="testAppendableException()" classname="velka.lang.test.TestUtil" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testAppendableException()]
display-name: AppendableException
]]></system-out>
</testcase>
<testcase name="testThrowingFunction()" classname="velka.lang.test.TestUtil" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testThrowingFunction()]
display-name: ThrowingFunction
]]></system-out>
</testcase>
<testcase name="testNameGenerator()" classname="velka.lang.test.TestUtil" time="0.484">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testNameGenerator()]
display-name: NameGenerator
]]></system-out>
</testcase>
<testcase name="testSandbox()" classname="velka.lang.test.TestUtil" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testSandbox()]
display-name: Sandbox (various experiments)
]]></system-out>
</testcase>
<testcase name="testThrowingBinaryOperator()" classname="velka.lang.test.TestUtil" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestUtil]/[method:testThrowingBinaryOperator()]
display-name: ThrowingBinaryOperator
]]></system-out>
</testcase>
<testcase name="testClojureOperators()" classname="velka.lang.test.TestComplex" time="0.06">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testClojureOperators()]
display-name: Clojure Operators
]]></system-out>
</testcase>
<testcase name="testComplexList()" classname="velka.lang.test.TestComplex" time="0.147">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testComplexList()]
display-name: Test User List Interpretation
]]></system-out>
</testcase>
<testcase name="testExtemdedLambda()" classname="velka.lang.test.TestComplex" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testExtemdedLambda()]
display-name: Test Basic Extended lambda
]]></system-out>
</testcase>
<testcase name="testListClojure()" classname="velka.lang.test.TestComplex" time="0.021">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testListClojure()]
display-name: Clojure List
]]></system-out>
</testcase>
<testcase name="testComplexTypes()" classname="velka.lang.test.TestComplex" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testComplexTypes()]
display-name: Test Complex Types
]]></system-out>
</testcase>
<testcase name="testClojureLiterals()" classname="velka.lang.test.TestComplex" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testClojureLiterals()]
display-name: Clojure Literals
]]></system-out>
</testcase>
<testcase name="testClojureConversions()" classname="velka.lang.test.TestComplex" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testClojureConversions()]
display-name: Clojure Conversions
]]></system-out>
</testcase>
<testcase name="testSpecialFormsAndApplication()" classname="velka.lang.test.TestComplex" time="0.02">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testSpecialFormsAndApplication()]
display-name: Clojure Special Forms and Applications
]]></system-out>
</testcase>
<testcase name="testRecursion()" classname="velka.lang.test.TestComplex" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestComplex]/[method:testRecursion()]
display-name: Test Recursion
]]></system-out>
</testcase>
<testcase name="testExceptionExpr()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testExceptionExpr()]
display-name: Test User Exception
]]></system-out>
</testcase>
<testcase name="testOperators()" classname="velka.lang.test.TestInterpretation" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testOperators()]
display-name: Test Operators
]]></system-out>
</testcase>
<testcase name="testConversions()" classname="velka.lang.test.TestInterpretation" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testConversions()]
display-name: Test Conversions
]]></system-out>
</testcase>
<testcase name="testLitInteger()" classname="velka.lang.test.TestInterpretation" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitInteger()]
display-name: Test Integer Literal
]]></system-out>
</testcase>
<testcase name="testTuple()" classname="velka.lang.test.TestInterpretation" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testTuple()]
display-name: Test Tuple
]]></system-out>
</testcase>
<testcase name="testLitDouble()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitDouble()]
display-name: Test Double Literal
]]></system-out>
</testcase>
<testcase name="testIfExpression()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testIfExpression()]
display-name: Test If
]]></system-out>
</testcase>
<testcase name="testDefTypeExpression()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDefTypeExpression()]
display-name: Test Define Type
]]></system-out>
</testcase>
<testcase name="testExpendedLambda()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testExpendedLambda()]
display-name: Test Extended Lambda
]]></system-out>
</testcase>
<testcase name="testEnvironment()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testEnvironment()]
display-name: Test Environment
]]></system-out>
</testcase>
<testcase name="testEmptyExpression()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testEmptyExpression()]
display-name: Test Empty Expression
]]></system-out>
</testcase>
<testcase name="testLitString()" classname="velka.lang.test.TestInterpretation" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitString()]
display-name: Test String Literal
]]></system-out>
</testcase>
<testcase name="testVariable()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testVariable()]
display-name: Test Symbol
]]></system-out>
</testcase>
<testcase name="testListNative()" classname="velka.lang.test.TestInterpretation" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testListNative()]
display-name: Test List Native
]]></system-out>
</testcase>
<testcase name="testOrExpression()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testOrExpression()]
display-name: testOrExpression()
]]></system-out>
</testcase>
<testcase name="testLitEnum()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitEnum()]
display-name: Test Enum Literal
]]></system-out>
</testcase>
<testcase name="testDefExpression()" classname="velka.lang.test.TestInterpretation" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDefExpression()]
display-name: Test Define Expression
]]></system-out>
</testcase>
<testcase name="testConstruct()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testConstruct()]
display-name: Test Construct
]]></system-out>
</testcase>
<testcase name="testCanDeconstructAs()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testCanDeconstructAs()]
display-name: Test Can Deconstruct As
]]></system-out>
</testcase>
<testcase name="testConvert()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testConvert()]
display-name: Test Convert
]]></system-out>
</testcase>
<testcase name="testDefinceConstructorExpression()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDefinceConstructorExpression()]
display-name: Test Define Constructor
]]></system-out>
</testcase>
<testcase name="testDefConversionExpression()" classname="velka.lang.test.TestInterpretation" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDefConversionExpression()]
display-name: Test Define Conversion
]]></system-out>
</testcase>
<testcase name="testLitBoolean()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitBoolean()]
display-name: Test Boolean Literal
]]></system-out>
</testcase>
<testcase name="testApplication()" classname="velka.lang.test.TestInterpretation" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testApplication()]
display-name: Test Application
]]></system-out>
</testcase>
<testcase name="testDefRepresentationExpression()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDefRepresentationExpression()]
display-name: Test Define Representation
]]></system-out>
</testcase>
<testcase name="testAutoConversion()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testAutoConversion()]
display-name: Test Automatic conversion
]]></system-out>
</testcase>
<testcase name="testDeconstruct()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testDeconstruct()]
display-name: Test Deconstruct
]]></system-out>
</testcase>
<testcase name="testAndExpression()" classname="velka.lang.test.TestInterpretation" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testAndExpression()]
display-name: Test AND
]]></system-out>
</testcase>
<testcase name="testLambda()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLambda()]
display-name: Test Lambda
]]></system-out>
</testcase>
<testcase name="testLitComposite()" classname="velka.lang.test.TestInterpretation" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testLitComposite()]
display-name: Test Composite Literal
]]></system-out>
</testcase>
<testcase name="testExtendedFunction()" classname="velka.lang.test.TestInterpretation" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testExtendedFunction()]
display-name: Test Extended Function
]]></system-out>
</testcase>
<testcase name="testTypeHolder()" classname="velka.lang.test.TestInterpretation" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testTypeHolder()]
display-name: Test Type Holder
]]></system-out>
</testcase>
<testcase name="testFunction()" classname="velka.lang.test.TestInterpretation" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:velka.lang.test.TestInterpretation]/[method:testFunction()]
display-name: Test Function
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
