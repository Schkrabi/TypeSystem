(define fcons (lambda (x y) (lambda (p) (if p x y))))
(define fcar (lambda (pair) (pair #t)))
(define fcdr (lambda (pair) (pair #f)))

(deftype List)
(defconstructor List (lambda (x (List y)) (cons x y)))

(defrep Functional List)
(defconstructor List:Functional (lambda (x (List y)) (fcons x y)))
(defconversion List List:Functional (lambda ((List l)) (fcons (car l) (cdr l))))
(defconversion List:Functional List (lambda ((List:Functional l)) (cons (fcar l) (fcdr l))))

(defrep Empty List)
(defconstructor List:Empty (lambda () nil))
(defconversion List:Empty List (lambda ((List:Empty l)) l))
(defconversion List:Empty List:Functional (lambda ((List:Empty l)) l))

(define x (List:Paired 1 (List:Functional 2 (List:Empty))))